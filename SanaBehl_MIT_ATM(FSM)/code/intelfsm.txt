module intelfsm(
  input wire clk,
  input wire reset,
  input wire [3:0] user_input,
  input wire [15:0] amount,
  input wire facial_recognition_result,
  output reg [7:0] display,
  output reg cash_dispenser,
  output reg account_lock,
  output reg [15:0] balance,
  output reg [7:0] mini_statement
);

  reg [2:0] state;
  reg [2:0] pin_entry_attempts;
  reg [15:0] account_balance;
  reg [15:0] withdrawal_amount;
  reg [31:0] recent_transactions [0:4];
  reg [2:0] recent_transactions_count;
  reg [2:0] i;
  
  parameter IDLE = 3'b000;
  parameter PIN_ENTRY = 3'b001;
  parameter ACCOUNT_LOCKED = 3'b010;
  parameter WITHDRAWAL = 3'b011;
  parameter FACIAL_RECOGNITION = 3'b100;
  parameter DEPOSIT = 3'b101;
  parameter BALANCE_DISPLAY = 3'b110;
  parameter MINI_STATEMENT = 3'b111;
  
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      state <= IDLE;
      pin_entry_attempts <= 3'b000;
      account_balance <= 16'b0;
      withdrawal_amount <= 16'b0;
      recent_transactions_count <= 3'b000;
      display <= 8'b0;
      cash_dispenser <= 1'b0;
      account_lock <= 1'b0;
      balance <= 16'b0;
      mini_statement <= 8'b0;
    end else begin
      case (state)
        IDLE:
          begin
            display <= "Enter PIN:";
            if (user_input == 4'b0000) begin
              state <= PIN_ENTRY;
            end
          end
          
        PIN_ENTRY:
          begin 
					
            if (user_input == 4'bXXXX) begin
              if (facial_recognition_result == 1'b1) begin
                state <= BALANCE_DISPLAY;
                balance <= account_balance;
                display <= "Account Balance: $";
					 
              end else begin
                pin_entry_attempts <= pin_entry_attempts + 1;
					
                if (pin_entry_attempts == 3'b0011) begin
                  state <= ACCOUNT_LOCKED;
                  account_lock <= 1'b1;
                  display <= "Account Locked for 24 hours.";
                end else begin
                  display <= "Invalid PIN. Try Again:";
                end
              end
            end
				begin
            if (user_input == 3'b1010) begin
              state <= WITHDRAWAL;
              display <= "Pin entry successful successful for withdrawal.";
            end 
				end
				begin
            if (user_input == 3'b1011) begin
              state <= DEPOSIT;
              display <= "Pin entry successful successful for deposit.";
            end 
				end
				
          end
          
        ACCOUNT_LOCKED:
          begin
            if (user_input == 4'bXXXX) begin
              state <= IDLE;
              account_lock <= 1'b0;
              display <= "Account Unlocked.";
            end
          end
          
        WITHDRAWAL:
          begin
            display <= "Enter withdrawal amount:";
            withdrawal_amount <= amount;
            if (withdrawal_amount > 10000) begin
              state <= FACIAL_RECOGNITION;
              display <= "Please perform facial recognition.";
            end else begin
              if (withdrawal_amount <= account_balance) begin
                account_balance <= account_balance - withdrawal_amount;
                recent_transactions[recent_transactions_count] <= -withdrawal_amount;
                recent_transactions_count <= recent_transactions_count + 1;
                state <= IDLE;
                display <= "Withdrawal successful.";
                cash_dispenser <= 1'b1;
              end else begin
                state <= IDLE;
                display <= "Insufficient funds.";
              end
            end
          end
          
        FACIAL_RECOGNITION:
          begin
            if (facial_recognition_result == 1'b1) begin
              state <= WITHDRAWAL;
              display <= "Facial recognition successful.";
            end else begin
              state <= ACCOUNT_LOCKED;
              display <= "Facial recognition failed.";
            end
          end
          
        DEPOSIT:
          begin
            account_balance <= account_balance + amount;
            recent_transactions[recent_transactions_count] <= amount;
            recent_transactions_count <= recent_transactions_count + 1;
            state <= IDLE;
            display <= "Deposit successful.";
          end
          
        BALANCE_DISPLAY:
          begin
            state <= IDLE;
            balance <= account_balance;
            display <= "Account Balance: $";
          end
          
        MINI_STATEMENT:
          begin
            state <= IDLE;
            mini_statement <= recent_transactions[0];
            for (i = 1; i < 5; i = i + 1) begin
              mini_statement <= {mini_statement, recent_transactions[i]};
            end
            display <= "Mini Statement generated.";
          end
          
      endcase
    end
  end
  
endmodule
